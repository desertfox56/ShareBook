# Comments are provided throughout this file to help you get started.
# If you need more help, visit the Docker compose reference guide at
# https://docs.docker.com/compose/compose-file/

# Here the instructions define your application as a service called "server".
# This service is built from the Dockerfile in the current directory.
# You can add other services your application may depend on here, such as a
# database or a cache. For examples, see the Awesome Compose repository:
# https://github.com/docker/awesome-compose

# The commented out section below is an example of how to define a PostgreSQL
# database that your application can use. `depends_on` tells Docker Compose to
# start the database before your application. The `db-data` volume persists the
# database data between container restarts. The `db-password` secret is used
# to set the database password. You must create `db/password.txt` and add
# a password of your choosing to it before running `docker compose up`.


version: '3.11.4'

services:
  server:
    build:
      context: .
    environment:
      - TZ=Europe/Moscow
    ports:
      - 8000:8000
    depends_on:
      - db
    volumes:
      - .:/app
      - static_volume:/app/static
      - media_volume:/app/media

  nginx:
    image: nginx:1.25.4  # Использование официального образа Nginx
    environment:
      - TZ=Europe/Moscow
    ports:
      - "80:80"
    depends_on:
      - server
    volumes:
      - static_volume:/app/static
      - media_volume:/app/media
      - ./nginx/nginx.conf:/etc/nginx/conf.d/default.conf:ro # Проброс директории с конфигом NGINX
  #Исправить настройку Реакт, открывается неверный порт.
  react:
    build:
      context: ../sharebooks-design
      dockerfile: Dockerfile
    environment:
      - TZ=Europe/Moscow
    volumes:
      - ../sharebooks-design:/app  # монтирование локальной папки для hot reload
      
    ports:
     # - "3000:80"
      - "3000:3000"
    #command: npm start
    depends_on:
      - server

  db:
    image: postgres
    restart: always
    user: postgres
    #secrets:
      #- db-password
    volumes:
      - db-data:/var/lib/postgresql/data
    environment:
      - TZ=Europe/Moscow
      - POSTGRES_DB=ShareBook
      - POSTGRES_PASSWORD='h%aRulfwwfOhO0k'
    expose:
      - 5432
    healthcheck:
      test: [ "CMD", "pg_isready" ]
      interval: 10s
      timeout: 5s
      retries: 5
volumes:
  db-data: 
  static_volume:
  media_volume:

#secrets:
  #db-password:
    #file: db/password.txt
